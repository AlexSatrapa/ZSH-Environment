#!/bin/sh

# Alex's you-beaut SSH enabler profile

# FIRST: A CAVEAT

# Note that once ssh-agent is running with your key added, anyone who
# has root access to this machine can become "you" by su'ing to your
# account, or by setting $SSH_AUTH_SOCK to your agent's socket.

# But you just have to assume that root-users are trustworthy. Which
# means only running this script on machines that are soley yours to
# control, such as your laptop.

# WHAT THIS SCRIPT DOES

# This script:
#   - Checks to see if you have details for an ssh-agent on
#     this host already
#      - If so: load the ssh-agent details into this shell
#      - Otherwise: start a new ssh-agent and save the details
#   - If there are no identities loaded, run ssh-add to load
#     all available keys

STOREPATH=$HOME/.ssh/hosts      # Directory to store details in
[ -z "$HOSTNAME" ] && HOSTNAME = 'default'
INFOPATH=$STOREPATH/$HOSTNAME   # Details for this host

function load_agent {
	# Start the SSH agent up
	ssh-agent -s > $INFOPATH
	echo "export SSH_AUTH_SOCK" >> $INFOPATH
	echo "export SSH_AGENT_PID" >> $INFOPATH
	source $INFOPATH
}

# First, some sanity checking
[ -d $STOREPATH ] || mkdir -p $STOREPATH

# Where possible, make sure only one ssh-agent is started
[ -x `which lockfile` ] || echo "Can't lock $INFOPATH, you might end up with multiple SSH agents"
case "$TERM" in 
	nsterm | rxvt | xterm | xterm-color)
		print -Pn "\e]0;(Waiting)\a"
		;;
esac

lockfile -2 $INFOPATH.lock

case "$TERM" in 
	nsterm | rxvt | xterm | xterm-color)
		print -Pn "\e]0;(Loading SSH agent)\a"
		;;
esac

# See if we've already got an authentication socket. This might
# have been passed to us by SSH from a remote host, for example.
if [ ! -z "$SSH_AUTH_SOCK" ] ; then
	echo "SSH authentication socket specified in environment ($SSH_AUTH_SOCK)."
	if ([ "`ssh-add -l 2>&1`" = "Could not open a connection to your authentication agent." ]) ; then
		echo "No answer from SSH_AUTH_SOCK, trying pre-defined agent."
		. $INFOPATH
	fi
# See if we've got a pre-defined SSH agent
elif [ -f $INFOPATH ] ; then
	. $INFOPATH
else
   load_agent
fi

# Now verify that an agent actually is available
# On Darwin, $SSH_AUTH_SOCK points to a 's' (socket) special file.
# On Linux, $SSH_AUTH_SOCK points to a 'p' (pipe) special file.
if ([ -S $SSH_AUTH_SOCK ] || [ -p $SSH_AUTH_SOCK ]) ; then
	echo "Using previously obtained SSH socket."
else
	echo "Previous SSH socket not found - starting a new agent."
	load_agent
fi

if ([ "`ssh-add -l`" = "The agent has no identities." ]) ; then
	ssh-add
fi
rm -f $INFOPATH.lock

case "$TERM" in 
	nsterm | rxvt | xterm | xterm-color)
		print -Pn "\e]0;(SSH agent loaded)\a"
		;;
esac
# SSH agent script ends
